name: Terraform Project

on:
  workflow_dispatch:
    inputs:
      project:
        description: "Project directory under projects/"
        required: true
        default: "cloud-setup.example-repo"
        type: string
      action:
        description: "Terraform action"
        required: true
        default: "plan"
        type: choice
        options:
          - plan
          - apply
          - destroy
env:
  # DigitalOcean Spaces bucket name and access key, used for terraform remote state.
  TF_VAR_region: ${{ vars.DO_STATE_BUCKET_REGION }}
  TF_VAR_bucket_name: ${{ vars.DO_STATE_BUCKET_NAME }}
  AWS_ACCESS_KEY_ID: ${{ vars.DO_STATE_BUCKET_ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.DO_STATE_BUCKET_SECRET_KEY }}
  
  # Terraforms Github provider authorization
  TF_VAR_github_organization: ${{ vars._GITHUB_ORGANIZATION_NAME }}
  TF_VAR_github_repo_token: ${{ secrets._GITHUB_REPO_TOKEN }}
  TF_VAR_github_repo_vars_token: ${{ secrets._GITHUB_REPO_VARS_TOKEN }}

jobs:
  validate-inputs:
    name: Validate project input
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      # Validate the project name, since we are using it as a working directory.
      # Since this name is also used for the terraform remote state key, we make sure you can't use the name to
      # traverse the filesystem and escape the projects/ directory in the s3 bucket used for remote state.
      - name: Validate project
        run: |
          set -euo pipefail
          PROJECT="${{ inputs.project }}"
          if ! echo "$PROJECT" | grep -Eq '^[A-Za-z0-9._-]+$'; then
            echo "::error::Invalid project name. Allowed: letters, numbers, dot, underscore, hyphen" >&2
            exit 1
          fi
          if [[ "$PROJECT" == .* || "$PROJECT" == *".."* ]]; then
            echo "::error::Invalid project name (contains dot traversal)" >&2
            exit 1
          fi
          if [[ "$PROJECT" == */* || "$PROJECT" == *\\* ]]; then
            echo "::error::Invalid project name (contains path separators)" >&2
            exit 1
          fi
          if [[ ! -d "projects/$PROJECT" ]]; then
            echo "::error::Project directory projects/$PROJECT does not exist" >&2
            exit 1
          fi

  terraform-plan:
    name: Terraform (${{ inputs.project }} - ${{ inputs.action }})
    runs-on: ubuntu-latest
    needs: validate-inputs
    defaults:
      run:
        working-directory: projects/${{ inputs.project }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Generate backend configuration
        run: |
          source ../../scripts/common.sh
          generate_backend_file "${{ vars.DO_STATE_BUCKET_REGION }}" "${{ vars.DO_STATE_BUCKET_NAME }}" "backend.hcl"

      - name: Terraform init
        run: terraform init -backend-config backend.hcl -backend-config="key=projects/${{ inputs.project }}/github-repository/terraform.tfstate"

      - name: Terraform validate
        run: terraform validate

      - name: Terraform plan (apply)
        if: inputs.action == 'plan' || inputs.action == 'apply'
        run: terraform plan -out=tfplan

      - name: Terraform plan (destroy)
        if: inputs.action == 'destroy'
        run: terraform plan -destroy -out=tfplan

      - name: Upload plan artifacts
        if: inputs.action == 'apply' || inputs.action == 'destroy'
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ inputs.project }}
          path: |
            projects/${{ inputs.project }}/tfplan
            projects/${{ inputs.project }}/backend.hcl

  apply-approved-plan:
    name: Apply (after manual approval)
    if: inputs.action == 'apply' || inputs.action == 'destroy'
    runs-on: ubuntu-latest
    needs: terraform-plan
    environment: production
    defaults:
      run:
        working-directory: projects/${{ inputs.project }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
      
      - name: Download Plan Artifacts
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan-${{ inputs.project }}
          path: projects/${{ inputs.project }}
      
      - name: Terraform Init
        run: terraform init -backend-config backend.hcl -backend-config="key=projects/${{ inputs.project }}/github-repository/terraform.tfstate"
      
      - name: Terraform Apply (from approved plan)
        run: terraform apply tfplan

